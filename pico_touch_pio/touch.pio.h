// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ---------- //
// touchsense //
// ---------- //

#define touchsense_wrap_target 3
#define touchsense_wrap 14

#define touchsense_offset_begin 0u

static const uint16_t touchsense_program_instructions[] = {
    0xe039, //  0: set    x, 25                      
    0xa0e1, //  1: mov    osr, x                     
    0x606c, //  2: out    null, 12                   
            //     .wrap_target
    0xe081, //  3: set    pindirs, 1                 
    0xe001, //  4: set    pins, 1                    
    0xa027, //  5: mov    x, osr                     
    0x0046, //  6: jmp    x--, 6                     
    0xe080, //  7: set    pindirs, 0                 
    0xe020, //  8: set    x, 0                       
    0xa029, //  9: mov    x, !x                      
    0x004c, // 10: jmp    x--, 12                    
    0x000d, // 11: jmp    13                         
    0x00ca, // 12: jmp    pin, 10                    
    0xa0c1, // 13: mov    isr, x                     
    0x8000, // 14: push   noblock                    
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program touchsense_program = {
    .instructions = touchsense_program_instructions,
    .length = 15,
    .origin = -1,
};

static inline pio_sm_config touchsense_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + touchsense_wrap_target, offset + touchsense_wrap);
    return c;
}

// This is a raw helper function for use by the user which sets up the GPIO output,
// and configures the SM to output on a particular pin
static inline void touchsense_program_init(PIO pio, uint sm, uint offset, uint touch_pin) {
  gpio_pull_down(touch_pin); // Enable pull-down
  //gpio_put(touch_pin, 1); // Drive GPIO high when output
  //gpio_set_dir(touch_pin, GPIO_OUT); // Set GPIO as output for now
  pio_sm_set_enabled(pio, sm, false); // Stop the state machine
  pio_sm_clear_fifos(pio, sm);   // Clear all FIFOs
  pio_sm_restart(pio, sm);
  pio_gpio_init(pio, touch_pin); // Connect GPIO to PIO
  pio_sm_set_consecutive_pindirs(pio, sm, touch_pin, 1, true); // Set GPIO as output
  pio_sm_config c = touchsense_program_get_default_config(offset);
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
  // hw_set_bits(&pio->sm[sm].shiftctrl, PIO_SM0_SHIFTCTRL_OUT_SHIFTDIR_BITS);
  sm_config_set_out_shift (&c, false, false, 32); // shift OSR left
  // Associate touch_pin with the 'in' instructions
  sm_config_set_in_pins(&c, touch_pin);
  // Associate touch_pin with 'jmp' instructions
  sm_config_set_jmp_pin(&c, touch_pin);
  // Associate touch_pin with 'set' instructions
  sm_config_set_set_pins(&c, touch_pin, 1);
  // Associate touch_pin with 'out' and sideset instructions
  sm_config_set_sideset_pins(&c, touch_pin);
  // Load the PIO program
  pio_sm_init(pio, sm, offset, &c);
}

#endif

